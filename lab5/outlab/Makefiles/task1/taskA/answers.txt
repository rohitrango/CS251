1. The makefile approach runs the compilation command if and only if some changes have been made to the files being compiled. This make the compilation process efficient by preventing unneccesary compilation. The script on the other hand just runs the commands given to it and would recompile the code each time it is executed.

Target - out
Dependency list - main.cpp dependency1.cpp dependency2.cpp

The list of dependencies is checked and if there are any changes made to any file after the previous compilation, the command corresponding to the target is executed to generate the target file `out`

Target - all
Dependency list - out

Checks if any changes have been made to the file `out` after previous compilation. If yes, then it goes to the corresponding target `out` to generate it.

`make` checks timestamps to see if files have been changed.

To use the file with the new name we have to use the command
`make -f makefile_1`

===================================================================================================================================

2.The files dependency1.cpp and dependency2.cpp were not recompiled. 
main.cpp was recompiled with `g++ -c main.cpp` to get main.o
Since there was a change in main.o, the command
`g++ -o out main.o dependency1.o dependency2.o`
also got executed to give a fresh file `out`

Makefile achieved this by checking which file had been changed and compiled the file only if it had been changed.

===================================================================================================================================

The second make command gave
`make: Nothing to be done for `all'.`

After adding the target `clean`, make still gave the same output since the compilation had already been done.

`make clean`(rather make -f makefile_3 clean) gave
`make: Nothing to be done for `all'.`

No we weren't expecting this behaviour. The files should have been deleted.

We found out that this was happening becauase running ./out had generated a file called `clean` and since it had no dependency, clean was always being considered up to date. `clean` is not really the name of a file we want; rather it is just a name for a recipe to be executed when we make a request by writing `make clean`. So we took care of this by writing `.PHONY: clean` which tells `make` that target clean is not to be interpreted as a file.

